<?xml version="1.0"?>

<project name="WindchillTools" default="help" xmlns:antc="antlib:net.sf.antcontrib">


   <!--
       Targets for command line tools.
       -->

   <dirname property="this.dir"            file="${ant.file.WindchillTools}"/>

   <condition property="env.wt_home"      value="${this.dir}/..">       <!-- only use wt_home env var when used by ABF -->
      <not><contains string="${ant.file.WindchillTools}" substring="tools_vs"/></not>
   </condition>

   <property environment="env"/>

   <property file="user.build.properties"/>  <!-- optional file of config overrides -->

   <condition property="env.wt_home"      value="${env.WT_HOME}" else="${ant.home}/..">  <!-- map to lower case -->
      <isset property="env.WT_HOME"/>
   </condition>
   <condition property="env.wt_home"      value="${basedir}/..">        <!-- default if no env var set -->
      <not><or><isset property="env.WT_HOME"/><contains string="${ant.file.WindchillTools}" substring="tools_vs"/></or></not>
   </condition>

   <property name="installroot"        location="${env.wt_home}"/>      <!-- set location of Windchill install root -->

   <property name="env.wt_buildroot"      value="${installroot}"/>      <!-- default to installroot, since separation brings runtime complications -->
   <property name="buildroot"          location="${env.wt_buildroot}"/> <!-- set location to build artifacts -->

   <condition property="env.wt_srcroot"   value="${env.wt_viewroot}/Windchill">   <!-- relative to viewroot, if it has been overriden -->
      <isset property="env.wt_viewroot"/>
   </condition>
   <property name="env.wt_srcroot"        value="${buildroot}"/>        <!-- default to buildroot -->
   <property name="srcroot"            location="${env.wt_srcroot}"/>   <!-- set location of source root -->

   <property name="env.wt_viewroot"       value="${installroot}/../"/>  <!-- default to parent install root -->
   <property name="viewroot"           location="${env.wt_viewroot}"/>  <!-- set location of sources view root -->

   <!-- [JMH] import common Ohio install property setup stuff -->
   <condition property="documentBaseDirName" value="codebase">
      <not><isset property="ohioInstall"/></not>
   </condition>

   <!-- debugging assistance in verbose mode -->
   <echo level="verbose">
      basedir                 ${basedir}
      ant.file                ${ant.file}
      ant.file.WindchillTools ${ant.file.WindchillTools}
      wt_home                 ${env.wt_home}
      installroot             ${installroot}
      srcroot                 ${srcroot}
      buildroot               ${buildroot}
   </echo>

   <property name="srcbase"               value="src"/>                 <!-- framework uses ${variant_suffix} -->
   <property name="classbase"             value="codebase"/>            <!-- framework uses ${variant_suffix} -->
   <property name="classdir"           location="${buildroot}/${classbase}"/>
   <property name="srcdir"             location="${srcroot}/${srcbase}"/>
   <property name="srclib"             location="${installroot}/srclib"/>
   <property name="env.wt_tool_lib"    location="${srclib}"/>     <!-- use env var as override, if defined, otherwise default to srclib -->
   <property name="env.wt_3rd_lib"     location="${srclib}"/>     <!-- use env var as override, if defined, otherwise default to srclib -->
   <property name="toollib"            location="${env.wt_tool_lib}"/>
   <property name="3rdlib"             location="${env.wt_3rd_lib}"/>
   <property name="xml_jars"              value="${3rdlib}/xmlParserAPIs.jar;${3rdlib}/xercesImpl.jar"/>
   <!-- [JMH] use ${documentBaseDirName} rather than codebase in next line -->
   <property name="rt_codebase"        location="${buildroot}/${documentBaseDirName}"/>
   <property name="rt_weblib"          location="${rt_codebase}/WEB-INF/lib"/>
   <property name="rt_serverlib"       location="${buildroot}/lib"/>
   <!-- [JMH] use ${documentBaseDirName} rather than codebase in next line -->
   <property name="inst_codebase"      location="${installroot}/${documentBaseDirName}"/>
   <property name="inst_weblib"        location="${inst_codebase}/WEB-INF/lib"/>
   <property name="inst_serverlib"     location="${installroot}/lib"/>

   <property name="perm_writeable"        value="ugo+w"/>
   <property name="perm_read-only"        value="ugo-w"/>

   <condition property="tool_assembly" value="tool/"     else="">
      <contains string="${toollib}" substring="srclib"/>    <!-- srclib uses assembly specific subdirs -->
   </condition>
   <condition property="wnc_assembly"  value="wnc/"      else="">
      <contains string="${toollib}" substring="srclib"/>    <!-- srclib uses assembly specific subdirs -->
   </condition>
   <condition property="jmx_assembly"  value="jmxcore/"  else="">
      <contains string="${toollib}" substring="srclib"/>    <!-- srclib uses assembly specific subdirs -->
   </condition>

   <condition property="java_home"        value="${jdk_home}" else="${env.JAVA_HOME}">
      <isset  property="jdk_home"/>
   </condition>
   <property name="java_tools_jar"        value="${java_home}/lib/tools.jar"/>
   <property name="java_rt_jar"           value="${java_home}/jre/lib/rt.jar"/>

   <target name="outputClasspath"      description="Output a classpath (default is wnc.class.path).">

      <property name="ocp" value="wnc.class.path"/>   <!-- default to wnc, but allow to be overridden on command line -->
      <property name="cp" refid="${ocp}"/>
      <property name="outputFile"            value="${ocp}"/>
      <property name="absoluteOutputFile" location="${outputFile}"/>
      <echo message="${ocp} (output to ${absoluteOutputFile}):"/>
      <echo message="${cp}"/>
      <echo message=""/>

      <echo message="${cp}" file="${absoluteOutputFile}"/>
   </target>

   <path id="sysgen.class.path">
      <pathelement location="${toollib}/${tool_assembly}SystemGeneration.jar"/>
      <pathelement location="${toollib}/${wnc_assembly}CommonXml.jar"/>
      <pathelement location="${toollib}/${wnc_assembly}CommonCore.jar"/>
      <pathelement location="${toollib}/${jmx_assembly}WtLogR.jar"/>
      <pathelement location="${srclib}/install/InstallUtil.jar"/>
      <fileset dir="${srclib}">        <!-- include L10N versions of tool jars -->
         <include name="tool/SystemGeneration_L10N.jar"/>
         <include name="wnc/CommonXml_L10N.jar"/>
         <include name="wnc/CommonCore_L10N.jar"/>
      </fileset>
      <pathelement location="${3rdlib}/commons-collections4.jar"/>
      <pathelement location="${3rdlib}/log4j-api.jar"/>
      <pathelement location="${3rdlib}/log4j-core.jar"/>
      <pathelement path="${xml_jars}"/>
   </path>

   <path id="processor.class.path">
      <pathelement path="${toollib}/${tool_assembly}AnnotationProcessing.jar"/>
      <pathelement path="${toollib}/${tool_assembly}Annotations.jar"/>
      <pathelement path="${toollib}/${wnc_assembly}CommonCore.jar"/>
      <pathelement path="${toollib}/${jmx_assembly}WtLogR.jar"/>
      <pathelement path="${srclib}/install/InstallUtil.jar"/>
      <pathelement path="${3rdlib}/commons-collections4.jar"/>
      <pathelement path="${3rdlib}/log4j-api.jar"/>
      <pathelement path="${3rdlib}/log4j-core.jar"/>
   </path>

   <!-- 3rd Party classpath -->
   <path id="3rdparty.class.path">
      <!-- 3rdPartyJars -->
      <fileset dir="${3rdlib}">
         <include name="*.jar"/>
         <include name="*.ZIP"/>
      </fileset>
   </path>

   <!-- WNC (platform) compile classpath -->
   <path id="wnc.class.path">
      <!-- support building into location segregated from install -->
      <pathelement location="${rt_codebase}"/>
      <fileset dir="${rt_weblib}">
         <include name="jmxcoreWeb.jar"/>
         <include name="ieWeb.jar"/>
         <include name="install/InstallUtil.jar"/>
      </fileset>
      <!-- installed runtime -->
      <pathelement location="${inst_codebase}"/>
      <fileset dir="${inst_weblib}">
         <include name="jmxcoreWeb.jar"/>
         <include name="ieWeb.jar"/>
         <include name="install/InstallUtil.jar"/>
      </fileset>
      <pathelement path="${toollib}/${tool_assembly}Annotations.jar"/>
      <!-- 3rdPartyJars -->
      <path refid="3rdparty.class.path"/>
   </path>

   <!-- Runtime (Method Server) classpath -->
   <path id="runtime.class.path">
      <!-- support building into location segregated from install -->
      <pathelement location="${rt_codebase}"/>
      <fileset dir="${rt_serverlib}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${rt_weblib}">
         <include name="*.jar"/>
      </fileset>
      <!-- installed runtime -->
      <pathelement location="${inst_codebase}"/>
      <fileset dir="${inst_serverlib}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${inst_weblib}">
         <include name="*.jar"/>
      </fileset>
      <pathelement path="${toollib}/${tool_assembly}Annotations.jar"/>  <!-- needed for compiles -->
   </path>


   <!-- Prepend runtime classpath to support sqlGen and other utilities that require it,
        and use codebase\wt.propeties for joint props like maxBytesPerChar -->
   <path id="sysgen.runtime.class.path">
      <path refid="runtime.class.path"/>
      <path refid="sysgen.class.path"/>
   </path>


   <!-- All srclib module jars. -->
   <path id="modules.class.path">
      <fileset dir="${srclib}">
         <include name="*/*.jar"/>           <!-- don't include 3rd party jars -->
         <exclude name="*/*_ja.jar"/>        <!-- don't need pseudo files -->
         <exclude name="tool/*"/>            <!-- don't need tools -->
         <exclude name="obsolete/*"/>        <!-- don't need obsolete jars -->
         <exclude name="prowt/*"/>           <!-- not generally needed, exclude to limit cmd length -->
      </fileset>
   </path>

   <!-- All srclib runtime module jars. -->
   <path id="runtime.modules.class.path">
      <fileset dir="${srclib}">
         <include name="*/*.jar"/>
         <exclude name="*/*_ja.jar"/>
         <exclude name="*/*-ant.jar"/>
         <exclude name="*/*-install.jar"/>
         <exclude name="*/*-upgrade.jar"/>
         <exclude name="*/*-windu.jar"/>
         <exclude name="*/*-winru.jar"/>
         <exclude name="*/*-example.jar"/>
         <exclude name="*/*-hybrid.jar"/>    <!-- don't need tests -->
         <exclude name="*/*-selenium.jar"/>  <!-- don't need tests -->
         <exclude name="*/*-test.jar"/>      <!-- don't need tests -->
         <exclude name="tool/*"/>            <!-- don't need tools -->
         <exclude name="obsolete/*"/>        <!-- don't need obsolete jars -->
         <exclude name="prowt/*"/>           <!-- not generally needed, exclude to limit cmd length -->
      </fileset>
   </path>

   <!-- All srclib runtime module jars, limited for cmd line length issues, only need those needed for SysGen. -->
   <path id="limited.runtime.modules.class.path">
      <fileset dir="${srclib}">
         <include name="*/*.jar"/>
         <exclude name="*/*_ja.jar"/>
         <exclude name="*/*Client*.jar"/>
         <exclude name="*/*-src.jar"/>
         <exclude name="*/*-web.jar"/>
         <exclude name="*/*-ant.jar"/>
         <exclude name="*/*-install.jar"/>
         <exclude name="*/*-upgrade.jar"/>
         <exclude name="*/*-windu.jar"/>
         <exclude name="*/*-winru.jar"/>
         <exclude name="*/*-example.jar"/>
         <exclude name="*/*-hybrid.jar"/>    <!-- don't need tests -->
         <exclude name="*/*-selenium.jar"/>  <!-- don't need tests -->
         <exclude name="*/*-test.jar"/>      <!-- don't need tests -->
         <exclude name="tool/*"/>            <!-- don't need tools -->
         <exclude name="obsolete/*"/>        <!-- don't need obsolete jars -->
         <exclude name="prowt/*"/>           <!-- not generally needed, exclude to limit cmd length -->
         <exclude name="ie/*"/>              <!-- not generally needed, exclude to limit cmd length -->
         <exclude name="jmxcore/*"/>         <!-- not generally needed, exclude to limit cmd length -->
      </fileset>
   </path>

   <!-- All srclib runtime module jars. -->
   <path id="srclib.runtime.class.path">
      <pathelement location="${rt_codebase}"/>
      <path refid="runtime.modules.class.path"/>
      <path refid="3rdparty.class.path"/>
   </path>

   <!-- Use kitchen sink classpath to support sqlGen,
        to ensure that all associated objects are available to introspection. -->
   <path id="sysgen.kitchensink.class.path">
      <pathelement location="${rt_codebase}"/>
      <path refid="sysgen.class.path"/>
      <path refid="limited.runtime.modules.class.path"/>
   </path>


   <target name="help">
      <echo message="Execute ant for a project with -projecthelp argument."/>
      <echo message="   ant -f ${ant.file} -projecthelp"/>
      <echo message=""/>
      <echo message="In addition, many targets may have individual help,"/>
      <echo message="which can be accessed with [target].help,"/>
      <echo message="where [target] is one of the listed targets."/>
      <echo message=""/>
      <echo message="wt_home     =${env.wt_home}"/>
      <echo message="installroot =${installroot}"/>
      <echo message="srcroot     =${srcroot}"/>
      <echo message="buildroot   =${buildroot}"/>
      <echo message=""/>
      <java classname="org.apache.tools.ant.Main">
         <arg value="-buildfile"/>
         <arg value="${ant.file}"/>
         <arg value="-projecthelp"/>
      </java>
   </target>

   <target name="customer_build.help"        depends="customer_build.init">
      <echo message="Builds all customizations that a customer might have created."/>
      <echo message="The equivalent individual targets are these:"/>
      <echo message="  1) Compile all customer rbInfo files."/>
      <echo message="     ant -f tools.xml customer_bundle"/>
      <echo message=""/>
      <echo message="  2) Compile all customer java files."/>
      <echo message="     ant -f tools.xml class -Dclass.includes=&quot;${class.includes}&quot; -Dclass.excludes=&quot;${class.excludes}&quot;"/>
      <echo message=""/>
      <echo message="  3) Generate customer sql scripts."/>
      <echo message="     ant -f tools.xml customer_sql_script"/>
      <echo message=""/>
      <echo message="  4) Regenerate ClassInfo's and sql scripts for customized columns."/>
      <echo message="     ant -f tools.xml custom_column -Dgen.input=&quot;${gen.input}&quot;"/>
      <echo message=""/>
      <echo message="  5) Compile all customized bundles."/>
      <echo message="     ant -f tools.xml bundle_custom -Dbundle.recurse=${bundle.recurse}"/>
      <echo message=""/>
      <echo message="  6) Rebuild customization related client jars."/>
      <echo message="     ant -f tools.xml customer_client_jars"/>
      <echo message=""/>
      <echo message="The customer_bundle and customer_sql_script targets process the"/>
      <echo message="customer folders in ${installroot}${file.separator}src${file.separator}"/>
      <echo message="  ${toString:customer_dirs}"/>
   </target>

   <target name="customer_build.init"
           unless="customer_build.skip"        depends="bundle_custom.init">

      <dirset id="customer_dirs" dir="${installroot}/src" includes="*/*" excludes="wt/*, com/ptc, com/infoengine, com/extjs, config/*, install/*"/>

      <property name="class.includes"        value="**/**"/>
      <property name="class.excludes"        value="wt/**, com/ptc/**, com/infoengine/**, com/extjs/**, config/**, install/**"/>
      <property name="gen.input"             value="*"/>    <!-- custom_column -->
      <property name="bundle.recurse"        value="true"/> <!-- bundle_custom -->

      <condition property="bundle_custom.skip"  value="true">
         <isset  property="bundle.input.missing"/>
      </condition>
   </target>

   <target name="customer_build"          description="Build all customer customizations. see customer_build.help"
           unless="customer_build.skip"        depends="customer_build.init, customer_bundle, class, customer_sql_script, custom_column, bundle_custom, customer_client_jars"/>

   <target name="class_wnc"            description="Compile java classes, using wnc classpath."
           unless="class_wnc.skip">

      <antcall target="class"              inheritAll="false">
         <param name="class.classpath"          value="wnc.class.path"/>
      </antcall>
   </target>

   <target name="class_wnc.help">

      <antcall target="class.help"         inheritAll="false">
         <param name="class.classpath"          value="wnc.class.path"/>
      </antcall>
   </target>

   <target name="class"                description="Compile java classes."
           unless="class.skip"           depends="class.init,class.check,class.clean,bundle.force">

      <javac fork=             "${class.fork}"
             failonerror=      "${class.failonerror}"
             destdir=          "${class.output}"
             srcdir=           "${class.source}"
             sourcepath=       "${class.sourcepath}"
             nowarn=           "${class.nowarn}"
             debug=            "${class.debug}"
             debuglevel=       "${class.debuglevel}"
             optimize=         "${class.optimize}"
             deprecation=      "${class.deprecation}"
             verbose=          "${class.verbose}"
             listfiles=        "${class.listfiles}"
             encoding=         "${class.encoding}"
             source=           "${class.source_ver}"
             target=           "${class.target_ver}"
             memoryMaximumSize="${class.max_mem}"
             includeAntRuntime="${class.includeAntRuntime}"
             includes=         "${class.includes}"
             excludes=         "${class.excludes}">
         <compilerarg line="${class.extra.args} ${class.ap.args} "/>
         <classpath  refid="${class.classpath}"/>
      </javac>
   </target>

   <target name="class.help"                    depends="class.init">
      <echo message="Required Properties:      Example          Value"/>
      <echo message="  class.includes          wt\fc\*          ${class.includes}"/>
      <echo message=""/>
      <echo message="Optional Properties:"/>
      <echo message="  class.excludes          **/test/**       ${class.excludes}"/>
      <echo message="  class.output            X:\ptc\codebase  ${class.output}"/>
      <echo message="  class.source            X:\ptc\src       ${class.source}"/>
      <echo message="  class.sourcepath        X:\ptc\src       ${class.sourcepath}"/>
      <echo message="  class.source_ver        11              ${class.source_ver}"/>
      <echo message="  class.target_ver        11              ${class.target_ver}"/>
      <echo message="  class.encoding          8859_15          ${class.encoding}"/>
      <echo message="  class.nowarn            on               ${class.nowarn}"/>
      <echo message="  class.debug             no               ${class.debug}"/>
      <echo message="  class.debuglevel        lines            ${class.debuglevel}"/>
      <echo message="  class.optimize          yes              ${class.optimize}"/>
      <echo message="  class.deprecation       yes              ${class.deprecation}"/>
      <echo message="  class.verbose           yes              ${class.verbose}"/>
      <echo message="  class.listfiles         yes              ${class.listfiles}"/>
      <echo message="  class.failonerror       no               ${class.failonerror}"/>
      <echo message="  class.max_mem           96m              ${class.max_mem}"/>
      <echo message="  class.includeAntRuntime yes              ${class.includeAntRuntime}"/>
      <echo message="  class.fork              yes              ${class.fork}"/>
      <echo message="  class.force             true             ${class.force}"/>
      <echo message="  class.classpath         env.class.path   ${class.classpath}"/>
      <echo message="                     OR   runtime.3rdparty.class.path"/>
      <echo message="  class.proc_args         -proc:only       ${class.proc_args}"/>
      <echo message="  class.extra             -source 1.4      ${class.extra.args}"/>
      <echo message=""/>
      <echo message="Usage Examples:"/>
      <echo message="  Compile wt.fc classes:"/>
      <echo message="    tools class -Dclass.includes=wt\fc\*"/>
      <echo message="  Forced re-compile for all wt.fc classes, including bundles:"/>
      <echo message="    tools class -Dclass.includes=wt\fc\* -Dclass.force=true"/>
      <echo message="  Compile wt.fc and wt.access packages:"/>
      <echo message="    tools class -Dclass.includes=&quot;wt\fc\*,wt\access\*&quot;"/>
      <echo message="  Compile wt.fc subpackages only:"/>
      <echo message="    tools class -Dclass.includes=wt\fc\*\*"/>
      <echo message="  Compile wt.fc and all its subpackages:"/>
      <echo message="    tools class -Dclass.includes=wt\fc\**"/>
      <echo message="  Compile all wt packages, excluding test packages:"/>
      <echo message="    tools class -Dclass.includes=wt\** -Dclass.excludes=**\test\**"/>
   </target>

   <target name="class.check"                   depends="wt_home.check">
      <fail unless="class.includes"
            message="The class.includes property must be defined. Example: -Dclass.includes=wt\fc\*"/>
   </target>

   <target name="class.init"                    depends="init">

      <property name="class.output"                  value="${classdir}"/>
      <property name="class.source"                  value="${srcdir}"/>
      <property name="class.source_gen"              value="${class.source}_gen"/>
      <property name="class.sourcepath"              value=""/>
      <property name="class.target_ver"              value="11"/>                  <!-- Default to release version 1.7 -->
      <property name="class.source_ver"              value="${class.target_ver}"/>  <!-- Default to target version -->
      <property name="class.encoding"                value="UTF-8"/>                <!-- UTF-8 now used for everything -->
      <property name="class.nowarn"                  value="off"/>
      <property name="class.debug"                   value="yes"/>
      <property name="class.debuglevel"              value="lines,source,vars"/> <!-- all available -->
      <property name="class.optimize"                value="no"/>
      <property name="class.deprecation"             value="no"/>
      <property name="class.verbose"                 value="no"/>
      <property name="class.listfiles"               value="no"/>
      <property name="class.failonerror"             value="yes"/>
      <property name="class.max_mem"                 value="64m"/> <!-- Java default value. -->
      <property name="class.includeAntRuntime"       value="no"/>
      <property name="class.includes"                value="*.java"/>
      <property name="class.excludes"                value=""/>
      <property name="class.fork"                    value="no"/>
      <property name="class.classpath"               value="runtime.class.path"/>

      <property name="gen.introspect"                value="true"/>  <!-- generate ClassInfo objects during class compile -->

      <condition property="class.extra.args" value="${class.extra}" else=""> <!-- allow user to pass extra args to javac -->
         <isset  property="class.extra"/>
      </condition>

      <path id="env.class.path">
         <pathelement path="${env.CLASSPATH}"/> <!-- case sensitive-->
      </path>

      <!-- Runtime (Method Server) + all 3rdPartyJars classapth -->
      <path id="runtime.3rdparty.class.path">
         <path refid="runtime.class.path"/>
         <fileset dir="${3rdlib}">
            <include name="*.jar"/>
         </fileset>
      </path>

      <mkdir dir="${class.output}"/>
      <mkdir dir="${class.source_gen}"/>  <!-- Folder for source code generated by Annotation Processors -->

      <condition property="debug_ap_class_info" value="true" else="false"> <!-- activate additional debug output -->
         <istrue value="${debug_ap}"/>
      </condition>
      <condition property="debug_ap_java"       value="true" else="false"> <!-- activate additional debug output -->
         <istrue value="${debug_ap}"/>
      </condition>
      <property name="class.proc_args"          value=""/> <!-- eg: -proc:only, -proc:none -->
      <property name="processorpath"    refid="processor.class.path"/>
      <property name="class.ap.args"   value="-processorpath ${processorpath} ${class.proc_args} -s ${class.source_gen} -Awt.home=${buildroot} -Agen_class_info=${gen.introspect} -Adebug_ap_class_info=${debug_ap_class_info} -Adebug_ap_java=${debug_ap_java}"/>
   </target>

   <target name="class.clean"                   depends="class.init,class.check"
           if="class.force">
      <delete quiet="true">
         <fileset dir="${class.output}" includes="${class.includes}">
            <filename name="**/*.class"/>
         </fileset>
      </delete>
   </target>


   <target name="class_version.help">
      <echo message="Required Properties:      Example          Value"/>
      <echo message="  class                   wt.part.PartType ${class}"/>
      <echo message=""/>
      <echo message="Optional Properties:"/>
      <echo message="  class.classpath         env.class.path   modules.class.path"/>
      <echo message="                     OR   runtime.3rdparty.class.path"/>
   </target>

   <target name="class_version"    description="Display version of a class file."
           unless="class.skip">

      <property name="class.classpath"          value="modules.class.path"/>
      <property name="class.classpath.prop"     refid="${class.classpath}"/>

      <exec executable="javap" output="${buildroot}/temp/${class}.javap"   logError="true">
         <arg value="-verbose"/>
         <arg value="${class}"/>
         <env key="CLASSPATH" path="${class.classpath.prop}"/>
      </exec>
      <loadfile property="class_version" srcFile="${buildroot}/temp/${class}.javap">
         <filterchain>
            <linecontains><contains value="version"/></linecontains>
         </filterchain>
      </loadfile>
      <delete quiet="true">
         <fileset dir="${buildroot}/temp" includes="${class}.javap"/>
      </delete>
      <echo message="${class}"/>
      <echo message="${class_version}"/>
   </target>


   <target name="bundle.force"                  depends="class.init,class.check"
           if="class.force">
      <antcall target="bundle">
         <param  name="bundle.includes"            value="${class.includes}"/>
         <param  name="bundle.output"              value="${buildroot}/codebase"/>
         <param  name="bundle.output.base"         value="fake"/> <!-- so it doesn't doesn't find the classes already built in the module codebase -->
      </antcall>
   </target>

   <target name="bundle_custom"                 description="Compile the customized resource bundles."
           unless="bundle_custom.skip"            depends="bundle_custom.init">

      <fail message="bundle.input custom directory ${bundle.input} does not exist." if="bundle.input.missing"/>

      <antcall target="bundle"                  inheritAll="false">
         <param name="bundle.input"             value="${bundle.input}"/>
         <param name="bundle.recurse"           value="${bundle.recurse}"/>
         <param name="bundle.search"            value="custom"/>
         <param name="bundle.forceCompile"      value="true"/>
      </antcall>
   </target>

   <target name="customer_bundle"               description="Compile customer resource bundles."
           unless="customer_bundle.skip"          depends="customer_build.init">

      <antc:for param="custPkgDir"> <!-- iterate all non-ptc (customer) src folders -->
         <path><dirset refid="customer_dirs"/></path>
         <sequential>
            <antcall target="bundle"                  inheritAll="false">
               <param name="bundle.input"             value="@{custPkgDir}"/>
               <param name="bundle.recurse"           value="true"/>
            </antcall>
         </sequential>
      </antc:for>
   </target>

   <target name="bundle_custom.init">

      <property name="bundle.input"          location="${srcroot}/wtCustom"/> <!-- Default location -->

      <condition property="bundle.input.isdir"  value="true">
         <or>  <!-- check for directory slashes to make determination -->
            <contains string="${bundle.input}" substring="\"/>
            <contains string="${bundle.input}" substring="/"/>
         </or>
      </condition>

      <condition property="bundle.recurse"      value="true">  <!-- Default recurse to, as long as registry not input since that can cause errors. -->
         <isset  property="bundle.input.isdir"/>
      </condition>

      <condition property="bundle.input.missing"  value="true">
         <and>
            <isset  property="bundle.input.isdir"/>
            <not><available file="${bundle.input}" type="dir"/></not>
         </and>
      </condition>
   </target>

   <target name="bundle_custom.help"            depends="bundle_custom.init"> <!-- duplicate actual target, but call its help option, to display my values -->

      <antcall target="bundle.help"             inheritAll="false">
         <param name="bundle.input"             value="${bundle.input}"/>
         <param name="bundle.recurse"           value="${bundle.recurse}"/>
         <param name="bundle.search"            value="custom"/>
         <param name="bundle.forceCompile"      value="true"/>
      </antcall>

   </target>

   <target name="bundle"                        description="Compile the resource bundles."
           unless="bundle.skip"                   depends="bundle.init,
           bundle.check">
      <java classname="wt.util.AppStarter" fork="yes" inputstring=""
            maxmemory="${bundle.maxmemory}"
            failonerror="${bundle.failonerror}">
         <classpath>
            <path       refid="sysgen.class.path"/>
            <pathelement path="${java_tools_jar}"/>   <!-- for inline compiling -->
         </classpath>
         <!-- All args preceding class are on one arg line so that it works on Unix -->
         <arg  line="${bundle.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} wt.tools.ResourceGenerator"/>
         <arg value="${bundle.input}"/>
         <arg value="wt.resource.updateInfos=F"/>
         <arg value="wt.resource.updateLocales=F"/>
         <arg value="wt.resource.buildResources=TRUE"/>
         <arg value="wt.resource.buildLocales=${bundle.buildLocales}"/>
         <arg  line="${bundle.fromDefault.arg}"/>
         <arg  line="${bundle.forceFromDefault.arg}"/>
         <arg  line="${bundle.accumulateGroup.arg}"/>
         <arg value="wt.resource.dir.recurse=${bundle.recurse}"/>
         <arg value="wt.resource.search.ArtifactDir=${bundle.search}"/>
         <arg  line="${bundle.source.arg}"/>
         <arg  line="${bundle.source.base.arg}"/>
         <arg  line="${bundle.output.base.arg}"/>
         <arg  line="${bundle.output.arg}"/>
         <arg  line="${bundle.compile.exe.arg}"/>
         <arg  line="wt.resource.compile.classpath=${bundle.compile.cp}"/>
         <arg  line="${bundle.compile.cmd.arg}"/>
         <arg value="wt.resource.forceCompile=${bundle.forceCompile}"/>
         <arg  line="${bundle.compile.target.arg}"/>
         <arg  line="wt.resource.compile.inprocess=${bundle.inprocess}"/>
         <arg  line="${bundle.temp.arg}"/>
         <arg  line="${bundle.extra.args}"/>
         <arg  line="${log.dir.arg}"/>
         <arg value="wt.home=${buildroot}"/>
         <arg value="wt.installroot=${installroot}"/>
         <arg value="wt.buildroot=${buildroot}"/>
         <!-- Setting wt.sourceroot=${srcroot} caused issues with the incorrect path being used when Windchill and source code are in seperate locations -->
         <arg value="wt.sourceroot=${installroot}"/>
      </java>

   </target>

   <target name="bundle.help"                   depends="bundle.init">
      <echo message="Required Properties:      Example          Value"/>
      <echo message="  bundle.input            wt.fc.*          ${bundle.input}"/>
      <echo message="                          X:\ptc\src\wt\fc"/>
      <echo message="                          registry"/>
      <echo message="  or"/>
      <echo message="  bundle.includes         wt/fc/**         ${bundle.includes}"/>
      <echo message="Optional Properties:"/>
      <echo message="  bundle.recurse          true             ${bundle.recurse}"/>
      <echo message="  bundle.buildLocales     false            ${bundle.buildLocales}"/>
      <echo message="  bundle.fromDefault      'en,en_us'       ${bundle.fromDefault}"/>
      <echo message="  bundle.forceFromDefault true             ${bundle.forceFromDefault}"/>
      <echo message="  bundle.forceCompile     true             ${bundle.forceCompile}"/>
      <echo message="  bundle.temp             C:/temp          ${bundle.temp}"/>
      <echo message="  bundle.source.base      my_src           ${bundle.source.base}"/>
      <echo message="  bundle.source           X:/ptc/my_src    ${bundle.source}"/>
      <echo message="  bundle.output.base      my_cbase         ${bundle.output.base}"/>
      <echo message="  bundle.output           X:/ptc/my_cbase  ${bundle.output}"/>
      <echo message="  bundle.compile.exe      javac            ${bundle.compile.exe}"/>
      <echo message="  bundle.compile.cp                        ${bundle.compile.cp}"/>
      <echo message="  bundle.compile.cmd      javac            ${bundle.compile.cmd}"/>
      <echo message="  bundle.compile.target   11              ${bundle.compile.target}"/>
      <echo message="  bundle.inprocess        false            ${bundle.inprocess}"/>
      <echo message="  jdk_home                C:/jdk           ${jdk_home}"/>
      <echo message="  env.wt_home             X:/ptc           ${installroot}"/>
      <echo message="  bundle.extra           (extra args for app)"/>
      <echo message=""/>
      <echo message="Usage Examples:"/>
      <echo message="  Compile bundles for wt.fc package:"/>
      <echo message="    tools bundle -Dbundle.input=wt.fc.*"/>
      <echo message="  Compile bundles for wt/fc directory tree:"/>
      <echo message="    tools bundle -Dbundle.includes=wt/fc/**"/>
   </target>

   <target name="bundle.check"                  depends="wt_home.check">
      <fail unless="bundle.input"
            message="The bundle.input property must be defined. Example: -Dbundle.input=wt.fc.*"/>
   </target>

   <target name="bundle.init"                   depends="AppStarter.init,bundle.includes.convert">

      <!-- Target:    bundle -->
      <property name="bundle.show_cp"              value="${AppStarter.show_cp}"/>
      <property name="bundle.failonerror"          value="${AppStarter.failonerror}"/>
      <property name="bundle.maxmemory"            value="${AppStarter.maxmemory}"/>
      <property name="bundle.buildLocales"         value="true"/>
      <property name="bundle.recurse"              value="false"/>
      <property name="bundle.forceCompile"         value="false"/>

      <condition property="bundle.fromDefault.arg" value="wt.resource.locales.fromDefault=${bundle.fromDefault}" else="">
         <isset  property="bundle.fromDefault"/>
      </condition>

      <condition property="bundle.forceFromDefault.arg" value="wt.resource.locales.fromDefault.force=${bundle.forceFromDefault}" else="">
         <isset  property="bundle.forceFromDefault"/>
      </condition>

      <condition property="bundle.temp.arg"        value="wt.temp=${bundle.temp}" else="">
         <isset  property="bundle.temp"/>
      </condition>

      <condition property="bundle.source.base"     value="${srcbase}">
         <not> <equals arg1="${srcbase}" arg2="src"/> </not>
      </condition>
      <condition property="bundle.source.base.arg" value="wt.rb.source.dir=${bundle.source.base} wt.source.dir=${bundle.source.base} wt.gen.dir=${bundle.source.base}"
                 else="">
         <isset  property="bundle.source.base"/>   <!-- 3 props based on this value -->
      </condition>

      <condition property="bundle.search"          value="${bundle.source.base}" else="rbi"> <!-- "custom" to search customizations -->
         <equals arg1="${bundle.source.base}" arg2="custom"/>
      </condition>

      <condition property="bundle.source"          value="${srcroot}/${bundle.source.base}">
         <isset  property="bundle.source.base"/>
      </condition>
      <condition property="bundle.source.arg"      value="wt.resource.source.dir=${bundle.source} wt.generation.source.dir=${bundle.source} wt.generation.gen.dir=${bundle.source}"
                 else="">
         <isset  property="bundle.source"/>     <!-- 3 props based on this value -->
      </condition>

      <condition property="bundle.output.base"     value="${classbase}">
         <not> <equals arg1="${classbase}" arg2="codebase"/> </not>
      </condition>
      <condition property="bundle.output.base.arg" value="wt.rb.bin.dir=${bundle.output.base}" else="">
         <isset  property="bundle.output.base"/>
      </condition>

      <condition property="bundle.output"          value="${buildroot}/${bundle.output.base}">
         <isset  property="bundle.output.base"/>
      </condition>
      <condition property="bundle.output.arg"      value="wt.resource.bin.dir=${bundle.output}" else="">
         <isset  property="bundle.output"/>
      </condition>

      <path id="bundle.compile.cp">
         <pathelement path="${env.CLASSPATH}"/> <!-- case sensitive-->
         <pathelement location="${toollib}/${wnc_assembly}CommonCore.jar"/>
         <pathelement location="${toollib}/${jmx_assembly}WtLogR.jar"/>
	 <pathelement location="${3rdlib}/log4j-api.jar"/>
	 <pathelement location="${3rdlib}/log4j-core.jar"/>
      </path>
      <property name="bundle.compile.cp" refid="bundle.compile.cp"/>

      <condition property="bundle.compile.exe"     value="${jdk_home}/bin/javac">  <!-- if set, use specified location -->
         <isset  property="jdk_home"/>
      </condition>
      <condition property="bundle.compile.exe.arg" value="wt.resource.compile.exe=${bundle.compile.exe}" else="">
         <isset  property="bundle.compile.exe"/>
      </condition>

      <condition property="bundle.compile.cmd.arg" value="wt.resource.compile=${bundle.compile.cmd}" else="">
         <isset  property="bundle.compile.cmd"/>
      </condition>

      <condition property="bundle.compile.target.arg" value="wt.resource.compile.target=${bundle.compile.target}" else="">
         <isset  property="bundle.compile.target"/>
      </condition>

      <condition property="bundle.inprocess"       value="FALSE" else="true">
         <contains string="${java_tools_jar}" substring=" "/>  <!-- embedded space in path blows up compiler -->
      </condition>

      <!-- On linux, and perhaps other UNI'ces, there's a problem with using the
           default value for wt.resource.accumulateGroup=true.  So we should explicitly
           force it to false on these platforms. -->

      <condition property="bundle.accumulateGroup" value="false" else="true">
         <os family="unix"/>
      </condition>

      <condition property="bundle.accumulateGroup.arg"   value="wt.resource.accumulateGroup=${bundle.accumulateGroup}" else="">
         <isset  property="bundle.accumulateGroup"/>
      </condition>

      <condition property="bundle.extra.args"      value="${bundle.extra}" else="">   <!-- allow user to pass extra args to app -->
         <isset  property="bundle.extra"/>
      </condition>

      <!-- need to default it, to ensure output directory exists before compile -->
      <property name="bundle.output.base"     value="${classbase}"/>
      <property name="bundle.output"          value="${buildroot}/${bundle.output.base}"/>

      <mkdir dir="${bundle.output}"/>

   </target>

   <target name="bundle.includes.convert" if="bundle.includes">
      <fail if="bundle.input"
            message="You cannot specify both bundle.input and bundle.includes"/>

      <condition property="bundle.dir"      value="${bundle.source}" else="${srcdir}">
         <isset  property="bundle.source"/>
      </condition>
      <dirset id="bundle.dirs" dir="${bundle.dir}" includes="${bundle.includes}"/>
      <pathconvert property="bundle.input" refid="bundle.dirs" pathsep=","/>
   </target>


   <target name="bundle_convert.help"  depends="bundle_convert.init">
      <echo message="Converts StringResourceInfo rbInfo files to Java source files"/>
      <echo message="Required Properties:      Example          Value"/>
      <echo message="  bundle_convert.path     com/acme         ${bundle_convert.path}"/>
      <echo message="Optional Properties:"/>
      <echo message="  bundle_convert.source   X:/ptc/my_src    ${bundle_convert.source}"/>
      <echo message="  bundle_convert.delete   false            ${bundle_convert.delete}"/>
      <echo message=""/>
      <echo message="Usage Examples:"/>
      <echo message="  Convert rbInfo flies for com.acme package and sub-packages:"/>
      <echo message="    tools bundle_convert -Dbundle_convert.path=wt/fc"/>
   </target>

   <target name="bundle_convert.check" depends="wt_home.check">
      <fail unless="bundle_convert.path"
            message="The bundle_convert.path property must be defined. Example: -Dbundle_convert.path=wt/fc"/>
   </target>

   <target name="bundle_convert.init"  depends="init">
      <property name="bundle_convert.source" value="${srcdir}"/>
      <property name="bundle_convert.delete" value="true"/>
   </target>

   <target name="bundle_convert"       depends="bundle_convert.init,bundle_convert.check">
      <fileset dir="${bundle_convert.source}${file.separator}${bundle_convert.path}" id="rbConvertListId">
         <patternset>
            <include name="**/*.rbInfo"/>
         </patternset>
         <and>
            <not>
               <filename name="**/*MBeanResource*.rbInfo"/>
            </not>
            <contains text="ResourceInfo.class=wt.tools.resource.StringResourceInfo"/>
         </and>
      </fileset>

      <pathconvert refid="rbConvertListId" property="rbConvertList" pathsep=" ">
         <map from="${bundle_convert.source}${file.separator}" to=""/>
      </pathconvert>

      <groovy src="${this.dir}/groovy/ConvertBundles.groovy">
         <classpath>
            <pathelement path="${toollib}/${wnc_assembly}CommonCore.jar"/>
            <pathelement path="${toollib}/${jmx_assembly}WtLogR.jar"/>
	    <pathelement path="${3rdlib}/log4j-api.jar"/>
	    <pathelement path="${3rdlib}/log4j-core.jar"/>
         </classpath>
         <arg value="${bundle_convert.source}"/>
         <arg value="${rbConvertList}"/>
         <arg value="false"/>
         <arg value="${bundle_convert.delete}"/>
         <arg value=""/>
      </groovy>
   </target>

   <target name="custom_convert.init"
           unless="custom_convert.skip">

      <property name="new_cust_bundle" value="wt/util/resource/resourceCustomize.rbInfo"/>

      <condition property="custom_convert.skip" value="true">
         <or>
            <not><available file="${installroot}/wtCustom" type="dir"/></not>
            <available file="${installroot}/wtCustom/${new_cust_bundle}"/>
            <resourcecount when="equal" count="0">  <!-- Any old StringResourceBundle customizations? -->
               <fileset id="custom_bundles" dir="${installroot}/wtCustom" includes="**/*.rbInfo" excludes="${new_cust_bundle}">
                  <contains text="ResourceInfo.class=wt.tools.resource.StringResourceInfo" casesensitive="yes"/>
               </fileset>
            </resourcecount>
         </or>
      </condition>
   </target>

   <target name="custom_convert"
           unless="custom_convert.skip"               depends="custom_convert.init">

      <copy file="${installroot}/src/${new_cust_bundle}" todir="${installroot}/wtCustom/${new_cust_bundle}/.."/>
      <antc:for param="custBundle">
         <path><fileset refid="custom_bundles"/></path>
         <sequential>
            <local    name="relBundle"/>
            <property name="relBundle"   location="@{custBundle}" relative="true" basedir="${installroot}/wtCustom"/>
            <antc:propertyregex input="${relBundle}" property="cust_bundle" override="true" defaultvalue="${relBundle}"
                                regexp=".rbInfo"
                                replace=""/>                   <!-- remove extension -->
            <antc:propertyregex input="${cust_bundle}" property="cust_bundle" override="true" defaultvalue="${cust_bundle}"
                                regexp="\${file.separator}"
                                replace="\."
                                global="true"/>               <!-- convert dir slashes to package dots -->

            <!-- aggregate each customized bundle -->
            <loadproperties srcFile="@{custBundle}">
               <filterchain>
                  <linecontains>
                     <contains value="="/>
                  </linecontains>
                  <linecontainsregexp negate="true">
                     <regexp pattern="^ResourceInfo.*"/>
                  </linecontainsregexp>
                  <striplinecomments>
                     <comment value="#"/>
                  </striplinecomments>
                  <prefixlines prefix="${cust_bundle}/"/>
               </filterchain>
            </loadproperties>
            <echoproperties prefix="${cust_bundle}/" destfile="@{custBundle}.converted"/>
            <concat destfile="${installroot}/wtCustom/${new_cust_bundle}" append="true">
               <filelist dir="${installroot}/wtCustom" files="${relBundle}.converted"/>
               <filterchain>
                  <striplinecomments>
                     <comment value="#"/>
                  </striplinecomments>
               </filterchain>
            </concat>
            <move file="@{custBundle}" tofile="@{custBundle}.orig"/>
         </sequential>
      </antc:for>
   </target>

   <target name="eclipse_project.help"  depends="eclipse_project.init">
      <echo message="Creates an Eclipse workspace and project for ${installroot}/src."/>
      <echo message="o Works with Eclipse 3.6.x (Helios)"/>
      <echo message="o Requires FileSync plugin (http://andrei.gmxhome.de/filesync/index.html)"/>
      <echo message=""/>
      <echo message="To use:"/>
      <echo message="0) Install FileSync"/>
      <echo message="   a) Start Eclipse"/>
      <echo message="   b) Accept the default workspace (we'll, later, assign a different one)"/>
      <echo message="   c) Select Help -> Install new software..."/>
      <echo message="   d) Click Add... (next to &quot;Work with:&quot;)"/>
      <echo message="   e) Set Name to FileSync and Location to http://andrei.gmxhome.de/eclipse/"/>
      <echo message="   f) Click OK, then wait until the &quot;Pending...&quot; text disappears"/>
      <echo message="   g) Type FileSync in the text are with the grayed-out text reading &quot;type filter text&quot;"/>
      <echo message="   h) Select the FileSync for Eclipse 3.6 (currently under Eclipse 3.5 - 3.7 plugins)"/>
      <echo message="   i) Click Next >, wait, then click Next > again"/>
      <echo message="   j) Select the &quot;I accept the terms of the license agreement&quot; radio button"/>
      <echo message="   k) Click Finish"/>
      <echo message="   l) OK the Security Warning"/>
      <echo message="   m) Click Not Now, then exit Eclipse."/>
      <echo message="1) Run the eclipse_project task"/>
      <echo message="2) Launch Eclipse, specifying ${installroot}/../eclipse as the workspace"/>
      <echo message="3) Import the cust_Windchill_src project"/>
      <echo message="   a) File -> Import... -> General -> Existing Projects into Workspace"/>
      <echo message="   b) Select Browse (next to &quot;Select root directory&quot;) and click OK"/>
      <echo message="   c) Your project will be listed and checked; click Finish."/>
      <echo message=""/>
      <echo message="Note that this project ignores (does not compile anything in) &quot;class.excludes&quot;,"/>
      <echo message="currently assigned to &quot;${class.excludes}&quot;."/>
      <echo message=""/>
      <echo message="Note, also, that Eclipse will not generate schema (SQL) nor &quot;compile&quot; rbInfo files."/>
      <echo message="Continue to use ant/this file (tools.xml) to generate schema (sql_script) and bundles (bundle)."/>
      <echo message="It will, however, compile the new RBEntry-based resource bundles (if you are currently using"/>
      <echo message="StringResourceInfos, consider converting them to Java via the &quot;bundle_convert&quot; target)."/>
      <echo message=""/>
      <echo message="This project builds to ${mod_classdir}."/>
      <echo message="FileSync then copies the artifacts over to ${bld_codebase},"/>
      <echo message="making them immediately available to Windchill and emulating the &quot;class&quot; target's behavior."/>
      <echo message=""/>
      <echo message="MethodServer debugging within Eclipse is supported:"/>
      <echo message="0) Run -> Debug Configurations"/>
      <echo message="1) Select MethodServer under Remote Java Applications"/>
      <echo message="2) You can, subsequently, use the &quot;Debug&quot; icon to start debugging."/>
      <echo message=""/>
      <echo message="To use this feature, you must enable debugging in the MethodServer."/>
      <echo message="Do so by adding the following to site.xconf and propagating the change:"/>
      <echo message="   &lt;Property name=&quot;wt.manager.cmd.MethodServer.debug.args&quot; overridable=&quot;true&quot;"/>
      <echo message="             targetFile=&quot;codebase/wt.properties&quot;"/>
      <echo message="             value=&quot;-Xnoagent -Xdebug -Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=n&quot;/>"/>
   </target>

   <target name="eclipse_project.check" depends="wt_home.check">
      <!-- Placeholder for now -->
   </target>

   <target name="eclipse_project.init" depends="init,class.init">
      <property name="ap_enable" value="true"/> <!-- needed to enable annotation processing -->
      <property name="assembly" value="cust"/> <!-- provides "cust" in "cust_Windchill_src" -->
      <property name="base_module" value="Windchill"/> <!-- provides "Windchill" in "cust_Windchill_src" -->
      <property name="modeled" value="true"/> <!-- needed to enable annotation processing -->
      <property name="mod_srcdir" value="${installroot}/src"/> <!-- use Windchill/src -->
      <property name="mod_gendir" value="${installroot}/src_gen"/> <!-- use Windchill/src_gen (some as "class" target) -->
      <property name="mod_classdir" value="${installroot}/eclipse_codebase"/> <!-- compile to Windchill/eclipse_codebase -->
      <property name="bld_codebase" value="${installroot}/codebase"/> <!-- FileSync to Windchill/codebase -->
      <property name="bld_libdir" value="${installroot}/srclib"/> <!-- needed to access Windchill/srclib jars -->
      <property name="mod_internaldir" value="${installroot}/srclib"/> <!-- needed to prevent crash -->
      <property name="modroot_location" value="${installroot}"/> <!-- needed to assign module_root -->
      <property name="tools_vs_cp" refid="runtime.class.path"/> <!-- needed because tools.xml uses different classpath variables -->

      <antc:if> <!-- exclude PTC source -->
         <equals arg1="${class.excludes}" arg2=""/> <!-- but only if they haven't manually specified excludes -->
         <antc:then>
            <antc:var name="class.excludes" unset="true"/>
            <property name="class.excludes" value="com/extjs/**,com/infoengine/**,com/ptc/**,config/**,install/**,wt/**"/>
         </antc:then>
      </antc:if>
   </target>

   <target name="eclipse_project"         depends="eclipse_project.init,eclipse_project.check" description="Generate an Eclipse workspace and project.">
      <property name="eclipse_project.folder"          value="eclipse"/>
      <property name="eclipse_project.gen_descriptors" value="true"/>   <!-- true will force update of descriptors -->

      <groovy src="${this.dir}/groovy/GenEclipseProject.groovy">
         <classpath>
            <pathelement path="${toollib}/${wnc_assembly}CommonCore.jar"/>
            <pathelement path="${toollib}/${jmx_assembly}WtLogR.jar"/>
	    <pathelement path="${3rdlib}/log4j-core.jar"/>
	    <pathelement path="${3rdlib}/log4j-api.jar"/>
         </classpath>
         <arg value="${eclipse_project.folder}"/>
         <arg value="${eclipse_project.gen_descriptors}"/>
      </groovy>
      <!-- SQL target doesn't work. -->
      <delete file="${viewroot}/${eclipse_project.folder}/${assembly}_${base_module}_src/${assembly}_${base_module}_src-sql_script.only.launch"/>
   </target>

   <target name="registry_diff.help"            depends="registry_diff.init">
      <echo message="Required Properties:        Example        Value"/>
      <echo message="  registry_diff.basedir     X:\base        ${registry_diff.basedir}"/>
      <echo message="  registry_diff.modsdir     X:\modified    ${registry_diff.modsdir}"/>
      <echo message="  registry_diff.diffdir     X:\diff        ${registry_diff.diffdir}"/>
   </target>

   <target name="registry_diff.check"           depends="wt_home.check">
      <fail unless="registry_diff.basedir"
            message="The registry_diff.basedir property must be defined. Example: -Dregistry_diff.basedir=X:\base"/>
      <fail unless="registry_diff.modsdir"
            message="The registry_diff.modsdir property must be defined. Example: -Dregistry_diff.modsdir=X:\modified"/>
      <fail unless="registry_diff.diffdir"
            message="The registry_diff.diffdir property must be defined. Example: -Dregistry_diff.diffdir=X:\diff"/>
   </target>

   <target name="registry_diff.init"            depends="AppStarter.init">

      <!-- Target:    registry_diff -->
      <property name="registry_diff.show_cp"     value="${AppStarter.show_cp}"/>
      <property name="registry_diff.failonerror" value="${AppStarter.failonerror}"/>
      <property name="registry_diff.maxmemory"   value="${AppStarter.maxmemory}"/>
      <property name="registry_diff.basedir"  location="${installroot}/codebase"/>
      <property name="registry.modsdir"       location="${buildroot}/codebase"/>    <!-- consistent with other targets -->
      <property name="registry_diff.modsdir"  location="${registry.modsdir}"/>
      <property name="registry_diff.diffdir"  location="${registry_diff.modsdir}"/>
      <property name="registry_diff.type"        value="add+remove"/>

   </target>

   <target name="registry_diff"                 description="Create model registry diff files."
           depends="registry_diff.init, registry_diff.check">
      <mkdir dir="${registry_diff.diffdir}"/>

      <echo message="   registry_diff.basedir=${registry_diff.basedir}" level="info"/>
      <echo message="   registry_diff.modsdir=${registry_diff.modsdir}" level="info"/>

      <!-- After this task succeeds,
           registry_diff.targetdir will contain only the adds/removes to the *Registry.properties files. -->
      <java classname="wt.util.AppStarter" fork="yes" inputstring=""
            maxmemory="${registry_diff.maxmemory}"
            failonerror="${registry_diff.failonerror}">
         <classpath refid="sysgen.class.path"/>
         <!-- All args preceding class are on one arg line so that it works on Unix -->
         <arg  line="${registry_diff.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} wt.util.tools.ModelRegistrar"/>
         <arg value="${registry_diff.type}"/>
         <arg  file="${registry_diff.modsdir}"/>
         <arg  file="${registry_diff.basedir}"/>
         <arg  line="${registry_diff.diffdir}"/>
         <arg  line="${log.dir.arg}"/>
         <arg value="wt.home=${buildroot}"/>
         <arg value="wt.installroot=${installroot}"/>
         <arg value="wt.buildroot=${buildroot}"/>
         <arg value="wt.sourceroot=${srcroot}"/>
      </java>
   </target>

   <target name="registry_merge.help"            depends="registry_merge.init">
      <echo message="Required Properties:        Example        Value"/>
      <echo message="  registry_merge.adds       X:\reg_adds    ${registry_merge.adds}"/>
      <echo message=""/>
      <echo message="Optional Properties:"/>
      <echo message="  registry_merge.removes    X:\reg_removes ${registry_merge.removes}"/>
   </target>

   <target name="registry_merge.check"           depends="wt_home.check">
      <fail unless="registry_merge.adds"
            message="The registry_merge.adds property must be defined. Example: -Dregistry_merge.adds=X:\reg_adds"/>
   </target>

   <target name="registry_merge.init"            depends="AppStarter.init">

      <!-- Target:    registry_merge -->
      <property name="registry_merge.show_cp"     value="${AppStarter.show_cp}"/>
      <property name="registry_merge.failonerror" value="${AppStarter.failonerror}"/>
      <property name="registry_merge.maxmemory"   value="${AppStarter.maxmemory}"/>

      <property name="registry_merge.removes"     value=""/>
   </target>

   <target name="registry_merge"                description="Merge model registry diff files into codebase registries."
           depends="registry_merge.init, registry_merge.check">
      <RegistryMerge/>
   </target>

   <macrodef name="RegistryMerge">
      <sequential>
         <!-- After this task succeeds, the codebase registries will include the entries from registry_merge.adds. -->
         <java classname="wt.util.AppStarter" fork="yes" inputstring=""
               maxmemory="${registry_merge.maxmemory}"
               failonerror="${registry_merge.failonerror}">
            <classpath refid="sysgen.class.path"/>
            <!-- All args preceding class are on one arg line so that it works on Unix -->
            <arg  line="${registry_merge.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} wt.util.tools.ModelRegistrar"/>
            <arg  line="${registry_merge.adds}"/>
            <arg  line="${registry_merge.removes}"/>
            <arg  line="${log.dir.arg}"/>
            <arg value="wt.home=${buildroot}"/>
            <arg value="wt.installroot=${installroot}"/>
            <!-- [JMH] added next line to clue ModelRegistrar in as to actual target directory -->
            <arg value="wt.registry.read.dir=${installroot}${file.separator}${documentBaseDirName}"/>
         </java>
      </sequential>
   </macrodef>

   <target name="model_install"                 description="Install module's packages into model registry."
           unless="model_install.skip"            depends="registry_merge.init, module.check">

      <property name="registry_merge.adds"        value="${installroot}/installer/${module}"/>

      <RegistryMerge/>
   </target>

   <target name="model_uninstall.init"
           unless="model_uninstall.skip">

      <condition property="registry_merge.removes" value="${installroot}/installer/${module}">
         <and>
            <isset property="module"/>
            <available file="${installroot}/installer/${module}/modelRegistry.properties" type="file"/>
         </and>
      </condition>
   </target>

   <target name="model_uninstall"               description="Uninstall packages from model registry."
           unless="model_uninstall.skip"          depends="model_uninstall.init, registry_merge.init">

      <antc:if><available file="${registry_merge.removes}"/>
         <antc:then>
            <RegistryMerge/>
         </antc:then>
      </antc:if>
      <antc:if><isset property="model_uninstall.filter"/>
         <antc:then>
            <FilterFile file="${inst_codebase}/modelRegistry.properties"       filter="${model_uninstall.filter}"/>
            <FilterFile file="${inst_codebase}/associationRegistry.properties" filter="${model_uninstall.filter}"/>
            <FilterFile file="${inst_codebase}/descendentRegistry.properties"  filter="${model_uninstall.filter}"/>
         </antc:then>
      </antc:if>
   </target>

   <target name="model_uninstall.help">
      <echo message="Required Properties:     Example          Value"/>
      <echo message="  module                 wnc/CommonCore    ${module}"/>
      <echo message="  -- OR --"/>
      <echo message="  registry_merge.removes X:\reg_removes    ${registry_merge.removes}"/>
      <echo message="  -- OR --"/>
      <echo message="  model_uninstall.filter &quot;\Aext\.|=ext\.&quot; ${model_uninstall.filter}"/>
      <echo message=""/>
      <echo message="Usage Examples:"/>
      <!-- doesn't work???
     <echo message="  Remove lines ending with 'Test':"/>
     <echo message="    model_uninstall -Dmodel_uninstall.filter=Test$"/-->
        <echo message="  Remove lines beginning with 'ext':"/>
        <echo message="    model_uninstall -Dmodel_uninstall.filter=\Aext"/>
        <echo message="  Remove lines containing 'test' anywhere:"/>
        <echo message="    model_uninstall -Dmodel_uninstall.filter=test"/>
        <echo message="  Remove lines containing 'ext' followed by '.test':"/>
        <echo message="    model_uninstall -Dmodel_uninstall.filter=ext.*\.test"/>
        <echo message="  Remove lines containing 'ext.' or '.myco':"/>
        <echo message="    model_uninstall -Dmodel_uninstall.filter=&quot;ext.|.myco&quot;"/>
        <echo message="  Remove lines beginning with 'ext.' or containing '=ext.':"/>
        <echo message="    model_uninstall -Dmodel_uninstall.filter=&quot;\Aext\.|=ext\.&quot;"/>
     </target>


     <macrodef name="FilterFile">
        <attribute name="file"/>
        <attribute name="filter"   default="zyx"/>   <!-- use zyx to not filter anything out, if nothing passed -->
        <sequential>
           <antc:if><available file="@{file}"/>
              <antc:then>
                 <copy file="@{file}" tofile="@{file}.bak" overwrite="true"/> <!-- first make backup of file -->
                 <copy file="@{file}.bak" tofile="@{file}" overwrite="true">  <!-- now copy filtered version back to where original was -->
                    <filterchain>
                       <linecontainsregexp negate="true">
                          <regexp pattern="@{filter}"/>
                       </linecontainsregexp>
                    </filterchain>
                 </copy>
              </antc:then>
           </antc:if>
        </sequential>
     </macrodef>

     <target name="ddl_uninstall"               description="Remove module from dll install scripts."
             unless="ddl_uninstall.skip"          depends="module.check">

        <FilterFile file="${installroot}/db/dB2/Drop_DDL_install.sql"        filter="${module}/"/>
        <FilterFile file="${installroot}/db/dB2/Make_DDL_install.sql"        filter="${module}/"/>
        <FilterFile file="${installroot}/db/sql/Drop_DDL_install.sql"        filter="${module}/"/>
        <FilterFile file="${installroot}/db/sql/Make_DDL_install.sql"        filter="${module}/"/>
        <FilterFile file="${installroot}/db/sql3/Drop_DDL_install.sql"       filter="${module}/"/>
        <FilterFile file="${installroot}/db/sql3/Make_DDL_install.sql"       filter="${module}/"/>
        <FilterFile file="${installroot}/db/sqlServer/Drop_DDL_install.sql"  filter="${module}/"/>
        <FilterFile file="${installroot}/db/sqlServer/Make_DDL_install.sql"  filter="${module}/"/>
        <FilterFile file="${installroot}/db/azureSQL/Drop_DDL_install.sql"  filter="${module}/"/>
        <FilterFile file="${installroot}/db/azureSQL/Make_DDL_install.sql"  filter="${module}/"/>

     </target>

     <target name="ddl_install"             description="Add module to dll install scripts."
             depends="register.init, module.check">

        <java classname="wt.util.AppStarter" fork="yes" inputstring=""
              maxmemory="${register.maxmemory}"
              failonerror="${register.failonerror}">
           <classpath refid="sysgen.runtime.class.path"/>
           <!-- All args preceding class are on one arg line so that it works on Unix -->
           <arg  line="${register.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} com.ptc.windchill.tools.ddl.DDLInstallGenerator"/>
           <arg value="${module}"/>
           <arg  line="${register.extra.args}"/>
           <arg  line="${log.dir.arg}"/>
           <arg value="wt.home=${buildroot}"/>
        </java>
     </target>

     <target name="register"                description="Register a module."
             depends="register.init, module.check">
        <!-- merge model registries -->
        <!-- update ddl install scripts -->
     </target>

     <target name="register.help"           depends="register.init">
        <echo message="Required Properties:      Example          Value"/>
        <echo message="  module                  wnc/CommonCore   ${module}"/>
        <echo message=""/>
        <echo message="Optional Properties:"/>
        <echo message="  register.mod_dir        X:/CommonCore    ${register.mod_dir}"/>
        <echo message="  register.install        uninstall        ${register.install}"/>
        <echo message="  register.extra          (extra args for app)"/>
     </target>

     <target name="module.check"             depends="wt_home.check">
        <fail unless="module" message="The module property must be defined. Example: -Dmodule=wnc/CommonCore"/>
     </target>

     <target name="register.init"           depends="AppStarter.init">

        <!-- Target:    register -->
        <property name="register.show_cp"               value="${AppStarter.show_cp}"/>
        <property name="register.failonerror"           value="${AppStarter.failonerror}"/>
        <property name="register.maxmemory"             value="${AppStarter.maxmemory}"/>
        <property name="register.mod_dir"               value=""/>
        <property name="register.install"               value="true"/>

        <condition property="register.extra.args"       value="${register.extra}"> <!-- allow user to pass extra args to app -->
           <isset  property="register.extra"/>
        </condition>
        <property name="register.extra.args"            value=""/>                 <!-- otherwise nothing to pass -->
     </target>


     <target name="custom_column"                 description="Update SQL Scripts for customized column lengths."
             unless="custom_column.skip"                depends="gen.init, gen.check">

        <antc:if><equals arg1="${gen.input}" arg2="*"/>
           <antc:then>
              <antc:for param="custPkgDir">
                 <path>   <!-- Find all dirs that contain {pkg}Model.properties files -->
                    <dirset dir="${installroot}/wtCustom" erroronmissingdir="no">
                       <present targetdir="${installroot}/wtCustom">
                          <regexpmapper from="(.*)\${file.separator}(.*)$$" to="\1/\2/\2Model.properties" />
                       </present>
                    </dirset>
                 </path>
                 <sequential>
                    <local    name="relPkgDir"/>
                    <property name="relPkgDir"   location="@{custPkgDir}" relative="true" basedir="${installroot}/wtCustom"/>
                    <antc:propertyregex input="${relPkgDir}" property="cust_pkg" override="true" defaultvalue="${relPkgDir}"
                                        regexp="\${file.separator}"
                                        replace="\."
                                        global="true"/>               <!-- convert dir slashes to package dots -->
                    <CustomColumn input="${cust_pkg}"/>              <!-- process each customized pacakge -->
                 </sequential>
              </antc:for>
           </antc:then>
           <antc:else>
              <CustomColumn input="${gen.input}"/>
           </antc:else>
        </antc:if>
     </target>

     <macrodef name="CustomColumn">
        <attribute name="input"/>
        <sequential>
           <java classname="wt.util.AppStarter" fork="yes" inputstring=""
                 maxmemory="${gen.maxmemory}"
                 failonerror="${gen.failonerror}">
              <classpath refid="${gen.classpath}"/>
              <!-- All args preceding class are on one arg line so that it works on Unix -->
              <arg  line="${gen.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} wt.tools.CustomizeColumnLength"/>
              <arg value="@{input}"/>
              <arg value="wt.generation.custom=true"/>
              <arg  line="${gen.extra.args}"/>
              <arg  line="${log.dir.arg}"/>
              <arg value="wt.home=${buildroot}"/>
              <arg value="wt.installroot=${installroot}"/>
              <arg value="wt.buildroot=${buildroot}"/>
              <arg value="wt.sourceroot=${srcroot}"/>
           </java>
        </sequential>
     </macrodef>

     <target name="custom_column.help"            depends="gen.init">
        <echo message="Required Properties:      Example          Value"/>
        <echo message="  gen.input               wt.doc           ${gen.input}"/>
        <echo message=""/>
        <echo message="Optional Properties:"/>
        <echo message="  gen.classpath_add       X:/mod/codebase  ${gen.classpath_add}"/>
        <echo message="  gen.extra               (extra args for app)"/>
     </target>

     <target name="customer_sql_script"           description="Generate customer SQL Scripts."
             unless="customer_sql_script.skip"      depends="gen.init">

        <antc:for param="custPkgDir">
           <path><dirset refid="customer_dirs"/></path>
           <sequential>
              <local    name="relPkgDir"/>
              <property name="relPkgDir"   location="@{custPkgDir}" relative="true" basedir="${installroot}/src"/>
              <antc:propertyregex input="${relPkgDir}" property="cust_pkg" override="true" defaultvalue="${relPkgDir}"
                                  regexp="\${file.separator}"
                                  replace="\."
                                  global="true"/>               <!-- convert dir slashes to package dots -->
              <SqlScripts genInput="${cust_pkg}.**"/>          <!-- process each customized package -->
           </sequential>
        </antc:for>
     </target>

     <target name="gen"                           depends="sql_script"/>  <!-- deprecated target -->

     <target name="sql_script"                    description="Generate SQL Scripts."
             unless="sql_script.skip"               depends="gen.init">
        <SqlScripts/>
     </target>

     <macrodef name="SqlScripts">
        <attribute name="genInput"                default="${gen.input}"/>
        <sequential>
           <java classname="wt.util.AppStarter" fork="yes" inputstring=""
                 maxmemory="${gen.maxmemory}"
                 failonerror="${gen.failonerror}">
              <classpath refid="${gen.classpath}"/>
              <!-- All args preceding class are on one arg line so that it works on Unix -->
              <arg  line="${gen.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} wt.tools.SqlGenerator"/>
              <arg value="@{genInput}"/>
              <arg  line="${gen.extra.args}"/>
              <arg  line="${log.dir.arg}"/>
              <arg value="wt.home=${buildroot}"/>
              <arg value="wt.installroot=${installroot}"/>
              <arg value="wt.buildroot=${buildroot}"/>
              <arg value="wt.sourceroot=${srcroot}"/>
           </java>
        </sequential>
     </macrodef>

     <target name="sql_script.help"                      depends="gen.init">
        <echo message="Required Properties:      Example          Value"/>
        <echo message="  gen.input               wt.fc.*          ${gen.input}"/>
        <echo message=""/>
        <echo message="Optional Properties:"/>
        <echo message="  gen.classpath_add       X:/mod/codebase  ${gen.classpath_add}"/>
        <echo message="  gen.extra               (extra args for app)"/>
     </target>

     <target name="gen.check"                     depends="wt_home.check">
        <fail unless="gen.input"
              message="The gen.input property must be defined. Example: -Dgen.input=wt.fc.*"/>
     </target>

     <target name="gen.init"                      depends="init,AppStarter.init">
        <!-- Target:    gen -->
        <property name="gen.show_cp"              value="${AppStarter.show_cp}"/>
        <property name="gen.failonerror"          value="${AppStarter.failonerror}"/>
        <property name="gen.maxmemory"            value="${AppStarter.maxmemory}"/>

        <condition property="gen.classpath"       value="gen.class.path">                 <!-- passed in classpath additions -->
           <isset property="gen.classpath_add"/>
        </condition>
        <property name="gen.classpath_tmp"        value="sysgen.kitchensink.class.path"/> <!-- sql gen requires runtime classpath -->
        <property name="gen.classpath"            value="${gen.classpath_tmp}"/>

        <path id="gen.class.path">
           <pathelement     path="${gen.classpath_add}"/>
           <path           refid="${gen.classpath_tmp}"/>
        </path>

        <condition property="gen.extra.args"      value="${gen.extra}" else="">           <!-- allow user to pass extra args to app -->
           <isset  property="gen.extra"/>
        </condition>
     </target>

     <target name="customer_client_jars"           description="Rebuild customer related client jars."
             unless="customer_client_jars.skip"      depends="init">

        <antc:if><available file="${inst_codebase}/MakeJar.xml"/>
           <antc:then>
              <ant antfile="${inst_codebase}/MakeJar.xml"  target="custUpdate" inheritAll="false"/>
           </antc:then>
           <antc:else>
              <echo message="Can't rebuild client jars, since there is no ${inst_codebase}/MakeJar.xml"/>
           </antc:else>
        </antc:if>
     </target>

     <target name="update_enunciate_index"     description="Generate an enunciate index file.">
        <property name="enunciate_base_dir"        value="${inst_codebase}/wt/clients/library/enunciate"/>
        <echo level="verbose">enunciate base directory is: ${enunciate_base_dir}</echo>
       <mkdir dir="${enunciate_base_dir}"/>

        <!-- Copy enunciate style doc for enunciate master index -->
        <copy file="${installroot}/bin/resources/enunciate_style.css" tofile="${enunciate_base_dir}/style.css" overwrite="false"/> <!-- Ensure the enunciate resoure is available -->

        <!-- The following script was made available from the Windchill ABF -->
        <groovy src="${this.dir}/groovy/UpdateEnunciateIndex.groovy">
           <arg value="${enunciate_base_dir}"/>
        </groovy>
     </target>

     <target name="search_path"               description="Search for file patterns in a path."
             unless="search_path.skip"              depends="search_path.init,
             search_path.check">
        <java classname="wt.tools.path.Search"    fork="yes" inputstring=""
              maxmemory="${search_path.maxmemory}"
              failonerror="${search_path.failonerror}">
           <classpath refid="sysgen.class.path"/>
           <arg value="${search_path.pattern}"/>
           <arg value="${search_path.classpath.arg}"/>
        </java>
     </target>

     <target name="search_path.help"              depends="search_path.init">
        <echo message="Required Properties:      Example          Value"/>
        <echo message="  search_path.pattern     MyClass.*        ${search_path.pattern}"/>
        <echo message=""/>
        <echo message="Optional Properties:"/>
        <echo message="  search_path.classpath   '%classpath%'    wnc.class.path"/>
        <echo message="  -- OR --"/>
        <echo message="  search_path.use_env     true             false"/>
        <echo message="  -- OR --"/>
        <echo message="  search_path.refid       3rdparty.class.path"/>
        <echo message="  -- OR --                modules.class.path"/>
     </target>

     <target name="search_path.check"             depends="wt_home.check">
        <fail unless="search_path.pattern"
              message="The search_path.pattern property must be defined. Example: -Dsearch_path.pattern=MyClass.*"/>
     </target>

     <target name="search_path.init"              depends="java.init">

        <!-- Target:    search_path -->
        <property name="search_path.failonerror"        value="${java.failonerror}"/>
        <property name="search_path.maxmemory"          value="${java.maxmemory}"/>

        <condition property="search_path.classpath.arg" value="${search_path.classpath}"> <!-- explicit search classpath -->
           <isset  property="search_path.classpath"/>
        </condition>
        <condition property="search_path.classpath.arg" value="${env.CLASSPATH}">         <!-- use env classpath -->
           <istrue    value="${search_path.use_env}"/>
        </condition>
        <condition property="search_path.classpath.ref" value="${search_path.refid}">     <!-- reference to already path defined -->
           <isset  property="search_path.refid"/>
        </condition>
        <property name="search_path.classpath.ref"      value="wnc.class.path"/>          <!-- otherwise use wnc classpath -->
        <property name="search_path.classpath.arg"      refid="${search_path.classpath.ref}"/>

     </target>
     <!-- description="Output contents of serialized ClassInfo objects."
          Hiding for now, since doesn't even work with kitchensink path
          because ET RB.ser files are not in module jars-->
     <target name="inforeport"
             unless="inforeport.skip"               depends="inforeport.init,
             inforeport.check">
        <condition property="inforeport.class" value="wt.introspection.XmlIiGenerator"
                   else="wt.introspection.WTIntrospectorTest">
           <istrue value="${inforeport.xml}"/>
        </condition>
        <java classname="${inforeport.class}"    fork="yes" inputstring=""
              maxmemory="${inforeport.maxmemory}"
              failonerror="${inforeport.failonerror}">
           <classpath refid="${inforeport.classpath.arg}"/>
           <arg value="${inforeport.target}"/>
           <arg value="wt.home=${buildroot}"/>
        </java>
     </target>

     <target name="inforeport.help"               depends="inforeport.init">
        <echo message="Required Properties:      Example          Value"/>
        <echo message="  inforeport.target       mypkg.MyClass    ${inforeport.target}"/>
        <echo message=""/>
        <echo message="Optional Properties:"/>
        <echo message="  inforeport.xml          true             false"/>
        <echo message="  inforeport.classpath    '%classpath%'    wnc.class.path"/>
        <echo message="  -- OR --"/>
        <echo message="  inforeport.use_env      true             false"/>
        <echo message="  -- OR --"/>
        <echo message="  inforeport.refid        srclib.runtime.class.path"/>
     </target>

     <target name="inforeport.check"              depends="wt_home.check">
        <fail unless="inforeport.target"
              message="The inforeport.target property must be defined. Example: -Dinforeport.target=mypkg.MyClass"/>
     </target>

     <target name="inforeport.init"               depends="java.init">

        <!-- Target:    search_path -->
        <property name="inforeport.failonerror"         value="${java.failonerror}"/>
        <property name="inforeport.maxmemory"           value="${java.maxmemory}"/>

        <condition property="inforeport.xml.arg"        value="-x" else="">               <!-- allow user to specify an xml report -->
           <istrue  value="${inforeport.xml}"/>
        </condition>

        <condition property="inforeport.classpath.arg"  value="${inforeport.classpath}">  <!-- explicit inforeport classpath -->
           <isset  property="inforeport.classpath"/>
        </condition>
        <condition property="inforeport.classpath.arg"  value="${env.CLASSPATH}">         <!-- use env classpath -->
           <istrue    value="${inforeport.use_env}"/>
        </condition>
        <condition property="inforeport.classpath.ref"  value="${inforeport.refid}">      <!-- reference to already path defined -->
           <isset  property="inforeport.refid"/>
        </condition>
        <property name="inforeport.classpath.ref"       value="wnc.class.path"/>          <!-- otherwise use wnc classpath -->
        <property name="inforeport.classpath.arg"       value="${inforeport.classpath.ref}"/>

     </target>


     <target name="app_starter"                   depends="app_starter.init, app_starter.check"
             unless="app_starter.skip">
        <java classname="wt.util.AppStarter" fork="yes" inputstring=""
              maxmemory="${app_starter.maxmemory}"
              failonerror="${app_starter.failonerror}">
           <classpath refid="sysgen.runtime.class.path"/>
           <!-- All args preceding class are on one arg line so that it works on Unix -->
           <arg  line="${app_starter.show_cp} ${log.tee.arg} ${log.prefix.arg} ${log.base.arg} ${log.append.arg} ${app_starter.class}"/>
           <arg  line="${app_starter.args.arg}"/>  <!-- unspecified args -->
           <arg  line="${log.dir.arg}"/>
           <arg value="wt.home=${buildroot}"/>
           <arg value="wt.installroot=${installroot}"/>
           <arg value="wt.buildroot=${buildroot}"/>
           <arg value="wt.sourceroot=${srcroot}"/>
        </java>
     </target>

     <target name="app_starter.help"              depends="app_starter.init">
        <echo message="Required Properties:      Example          Value"/>
        <echo message="  app_starter.class       wt.tools.SystemGeneration"/>
        <echo message=""/>
        <echo message="Optional Properties:"/>
        <echo message="  log.tee                 true             ${log.tee}"/>
        <echo message="  log.append              true             ${log.append}"/>
        <echo message="  log.dir                 X:\logs          ${log.dir}"/>
        <echo message="  log.prefix              0001-            ${log.prefix}"/>
        <echo message="  log.base                                 ${log.base}"/>
        <echo message="  app_starter.args        'wt.fc.* wt.generation.genJavaSource=F'"/>
     </target>

     <target name="app_starter.check"             depends="wt_home.check">
        <fail unless="app_starter.class"
              message="The app_starter.class property must be defined. Example: -Dapp_starter.class=wt.tools.ResourceGenerator"/>
     </target>

     <target name="app_starter.init"              depends="AppStarter.init">

        <!-- Target:    app_starter -->
        <property name="app_starter.show_cp"      value="${AppStarter.show_cp}"/>
        <property name="app_starter.failonerror"  value="${AppStarter.failonerror}"/>
        <property name="app_starter.maxmemory"    value="${AppStarter.maxmemory}"/>

        <condition property="app_starter.args.arg" value="${app_starter.args}"> <!-- if set -->
           <isset  property="app_starter.args"/>
        </condition>
        <property name="app_starter.args.arg"     value=""/>                    <!-- otherwise -->
     </target>


     <target name="AppStarter.init"               depends="java.init">
        <!-- Group:     AppStarter tasks -->
        <property name="AppStarter.show_cp"       value="-hideClasspath"/>        <!-- to display, set ="" -->
        <property name="AppStarter.failonerror"   value="${java.failonerror}"/>
        <property name="AppStarter.maxmemory"     value="${java.maxmemory}"/>

        <condition property="log.dir"             value="${PTCLogger.dir}">
           <isset property="PTCLogger.dir"/>
        </condition>

        <condition property="log.dir.arg"         value="wt.logs.dir=${log.dir}">
           <isset property="log.dir"/>
        </condition>
        <property name="log.dir.arg"              value=""/>        <!-- otherwise default to empty string -->

        <condition property="log.tee.arg"         value="-tee">     <!-- if tee set to true -->
           <istrue  value="${log.tee}"/>
        </condition>
        <property name="log.tee.arg"              value=""/>        <!-- otherwise default to empty string -->

        <condition property="log.prefix"          value="${PTCLogger.baseFileName}-">
           <isset property="PTCLogger.filePrefix"/>
        </condition>

        <condition property="log.prefix.arg"      value="-logPrefix ${log.prefix}"> <!-- if prefix set pass it on -->
           <isset property="log.prefix"/>
        </condition>
        <property name="log.prefix.arg"           value=""/>        <!-- otherwise default to empty string -->

        <condition property="log.base.arg"        value="-logBase ${log.base}"> <!-- if prefix set pass it on -->
           <isset property="log.base"/>
        </condition>
        <property name="log.base.arg"             value=""/>        <!-- otherwise default to empty string -->

        <condition property="log.append.arg"      value="-append">  <!-- if append, or prefix and not explicitly false, set to true -->
           <or>
              <istrue  value="${log.append}"/>
              <and>
                 <not>
                    <istrue  value="${log.append}"/>
                 </not>
                 <isset property="log.prefix"/>
              </and>
           </or>
        </condition>
        <property name="log.append.arg"           value=""/>        <!-- otherwise default to empty string -->

        <condition property="log.append"          value="true">     <!-- for benefit of .help target -->
           <equals arg1="${log.append.arg}" arg2="-append"/>
        </condition>
     </target>

     <target name="java.init"                     depends="init">
        <!-- Group:     java tasks -->
        <property name="java.failonerror"         value="true"/>
        <property name="java.maxmemory"           value="350m"/>
     </target>

     <target name="init">
        <mkdir dir="${rt_weblib}"/>
        <mkdir dir="${rt_serverlib}"/>
     </target>

     <target name="wt_home.check">
        <fail unless="env.wt_home" message="The wt_home environment variable must be defined. Example: -Denv.wt_home=X:\Windchill"/>

        <available file="${env.wt_home}" type="dir" property="wt_home.exists"/>
        <fail message="wt_home directory ${env.wt_home} does not exist." unless="wt_home.exists"/>
     </target>


     <target name="wt.step.schema.gen" depends="wt_home.check">
        <java classname="wt.step.schemaGenerator.MakeSchema" fork="yes" inputstring="" failonerror="true">
           <classpath >
              <path refid="wnc.class.path"/>
              <pathelement path="${buildroot}/codebase/WEB-INF/lib/mail.jar;${buildroot}/codebase/WEB-INF/lib/wncWeb.jar;${buildroot}/lib/servlet.jar;${buildroot}/codebase"/>
              <pathelement location="${buildroot}/codebase/WEB-INF/lib/wc3rdpartylibs.jar"/>
              <pathelement path="${installroot}/codebase/WEB-INF/lib/mail.jar;${installroot}/codebase/WEB-INF/lib/wncWeb.jar;${installroot}/lib/servlet.jar;${installroot}/codebase"/>
              <pathelement location="${installroot}/codebase/WEB-INF/lib/wc3rdpartylibs.jar"/>
           </classpath>
           <arg file="${buildroot}/step/schemas/Windchill/windchill_schema.exp"/>                               <!-- Windchill LoadPoint -->
           <arg file="${buildroot}/codebase/modelRegistry.properties"/>
           <arg value="wt.lifecycle"/>
           <arg value="wt.vc"/>
           <arg value="wt.vc.views"/>
           <arg value="wt.series"/>
           <arg value="wt.content"/>
           <arg value="wt.enterprise"/>
           <arg value="wt.fc"/>
           <arg value="wt.doc"/>
           <arg value="wt.part"/>
           <arg value="wt.org"/>
           <arg value="wt.epm"/>
           <arg value="wt.epm.build"/>
        </java>
     </target>

     <!-- File removal utilities -->

     <macrodef name="InitFileset">
        <sequential>
           <property name="filename"           value="${ant.file.WindchillTools}"/>   <!-- need to default to some file that exists -->
           <property name="todir"              value="${installroot}/temp/Windchill"/>
           <mkdir  dir="${todir}"/>
           <fileset id="fileset_id" dir="${dir}" includes="${filespec}" includesfile="${filename}"/>
        </sequential>
     </macrodef>

     <target name="files_copy"            description="Copy specified files.">
        <!-- Copies all files of a certain spec. -->
        <InitFileset/>
        <copy todir="${todir}">
           <fileset refid="fileset_id"/>
        </copy>
     </target>

     <target name="files_move"           description="Move specified files.">
        <!-- Moves all files of a certain spec. -->
        <InitFileset/>
        <move todir="${todir}">
           <fileset refid="fileset_id"/>
        </move>
     </target>

     <target name="files_remove"         description="Remove specified files."
             unless="todir">   <!-- don't allow mistake of calling remove, when meant to move or copy -->
        <!-- Deletes all files of a certain spec. -->
        <InitFileset/>
        <delete quiet="true">
           <fileset refid="fileset_id"/>
        </delete>
     </target>

     <target name="files_copy.help">
        <CopyMoveHelp/>
     </target>

     <target name="files_move.help">
        <CopyMoveHelp/>
     </target>

     <target name="files_remove.help">
        <RemoveHelp/>
     </target>

     <macrodef name="CopyMoveHelp">
        <sequential>
           <RemoveHelp/>
           <echo message="  todir                   X:/temp/ptc      ${todir}"/>
        </sequential>
     </macrodef>

     <macrodef name="RemoveHelp">
        <sequential>
           <echo message="Required Properties:      Example          Value"/>
           <echo message="  filespec                **/*Fwd.java     ${filespec}"/>
           <echo message="  dir                     X:/ptc/src       ${dir}"/>
        </sequential>
     </macrodef>

</project>
